<?xml version="1.0" encoding="UTF-8"?>

<!--
    logback.groovy
    logback-test.xml
    logback.xml 如果均不存在会采用默认配置

    logback组件之间的关系
        1. Logger:日志的记录器，把它关联到应用的对应的context上后，主要用于存放日志对象，也可以定义日志类型、级别。
        2. Appender:用于指定日志输出的目的地，目的地可以是控制台、文件、数据库等等。
        3. Layout:负责把事件转换成字符串，格式化的日志信息的输出。在logback中Layout对象被封装在encoder中
-->


<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
     scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
     debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- 上下文变量设置,用来定义变量值,其中name的值是变量的名称，value的值时变量定义的值。
        通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
    <!-- 应用名称 -->
    <property name="APP_NAME" value="logback" />

    <!--日志文件的保存路径,首先查找系统属性-Dlog.dir,如果存在就使用其；否则，在当前目录下创建名为logs目录做日志存放的目录 -->
    <property name="LOG_HOME" value="${log.dir:-logs}/${APP_NAME}" />

    <!-- 日志输出格式 -->
    <!-- 日志输出格式：
             %-5level                      级别从左显示5个字符宽度
             %d{yyyy-MM-dd HH:mm:ss.SSS}   表示日期
             %c                            输出发出日志记录请求的调用方的全限定类名。
             %M                            method方法
             %L                            行号
             %thread                        线程名
             %m或者%msg为信息                日志消息
             %n换行                         换行符
             %highlight                    高亮显示
             %contextName/%cn              输出事件起源处的记录器所附加到的记录器上下文的名称
             %logger                       日志记录器的名字

             详见http://logback.qos.ch/manual/layouts.html
    -->
    <property name="ENCODER_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss} %5p %c:%L %m%n"/>

    <!-- 上下文名称：<contextName>, 每个logger都关联到logger上下文，
        默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。
        一旦设置，不能修改。 -->
    <contextName>${APP_NAME}</contextName>

    <!-- <appender>是<configuration>的子节点，是负责写日志的组件。
        有两个必要属性name和class。
        name指定appender名称，
        class指定appender的实现类。
        一般生产环境都是后台启动
        appender是一个日志打印的组件，这里组件里面定义了打印过滤的条件、打印输出方式、滚动策略、编码方式、打印格式等等。
        但是它仅仅是一个打印组件，如果我们不使用一个logger或者root的appender-ref指定某个具体的appender时，它就没有什么意义。-->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 对日志进行格式化。 -->
        <encoder>
            <pattern>
                ${ENCODER_PATTERN}
            </pattern>
        </encoder>
    </appender>

    <!--滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称 -->
        <file>${LOG_HOME}/${APP_NAME}.log</file>

         <!--如果是 true，日志被追加到文件结尾，如果是false，清空现存文件，默认是true。-->
        <append>true</append>

        <!--滚动时产生的文件的存放位置及文件名称
              %d{yyyy-MM-dd}：按天进行日志滚动
              %i：当文件大小超过maxFileSize时，按照i进行文件滚动-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名:按天回滚 daily -->
            <FileNamePattern>
                ${LOG_HOME}/%d{yyyy-MM-dd}/${APP_NAME}-%d{yyyy-MM-dd}-%i.log
            </FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>

            <!--当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动
                注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，
                必须配置timeBasedFileNamingAndTriggeringPolicy-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>30MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 对记录事件进行格式化。 -->
        <encoder>
            <charset>UTF-8</charset>
            <Pattern>
                ${ENCODER_PATTERN}
            </Pattern>
        </encoder>
    </appender>

    <!--appender的name可以随意指定，被logger的appender-ref标签引用-->
    <appender name="errorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 指定日志文件的名称 -->
        <file>${LOG_HOME}/${APP_NAME}-error.log</file>

        <!--如果是 true，日志被追加到文件结尾，如果是false，清空现存文件，默认是true。-->
        <append>true</append>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--只匹配ERROR级别日志-->
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名:按天回滚 daily -->
            <FileNamePattern>
                ${LOG_HOME}/%d{yyyy-MM-dd}/${APP_NAME}-error-%i.log
            </FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>

            <!--当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动
                注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，
                必须配置timeBasedFileNamingAndTriggeringPolicy-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>30MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 对记录事件进行格式化。 -->
        <encoder>
            <charset>UTF-8</charset>
            <Pattern>
                ${ENCODER_PATTERN}
            </Pattern>
        </encoder>
    </appender>

    <!--appender的name可以随意指定，被logger的appender-ref标签引用-->
    <appender name="infoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 指定日志文件的名称 -->
        <file>${LOG_HOME}/${APP_NAME}-info.log</file>

        <!--如果是 true，日志被追加到文件结尾，如果是false，清空现存文件，默认是true。-->
        <append>true</append>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--只匹配ERROR级别日志-->
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名:按天回滚 daily -->
            <FileNamePattern>
                ${LOG_HOME}/%d{yyyy-MM-dd}/${APP_NAME}-info-%i.log
<!--                ${LOG_HOME}/${APP_NAME}-info-%i.log-->
            </FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>

            <!--当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动
                注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，
                必须配置timeBasedFileNamingAndTriggeringPolicy-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>30MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 对记录事件进行格式化。 -->
        <encoder>
            <charset>UTF-8</charset>
            <Pattern>
                ${ENCODER_PATTERN}
            </Pattern>
        </encoder>
    </appender>

    <!-- 特殊的<logger>元素，是根logger。只有一个level属性，因为已经被命名为"root".
        level:设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。
        <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
        root是所有logger的父级，当logger的additivity=false时，logger管理的日志不再父级传递
        root的level尽量高一些，logger的级别必须低于root的级别才能输出
        ALL > TRACE > FATAL > DEBUG > INFO > WARN > ERROR > OFF-->
    <root>
        <level value="info" />
        <appender-ref ref="stdout" />
        <appender-ref ref="file" />
        <appender-ref ref="errorLog"/>
        <appender-ref ref="infoLog"/>
    </root>

    <!-- 用来设置某一个 包 或者具体的某一个 类 的日志打印级别、以及指定<appender>,
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
        additivity:是否向上级logger传递打印信息。默认是true。(这个logger的上级就是上面的root)
        <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。-->
<!--    <logger name="com.example.logback" level="DEBUG" additivity="false">-->
<!--        <appender-ref ref="stdout" />-->
<!--        <appender-ref ref="file" />-->
<!--        <appender-ref ref="errorLog"/>-->
<!--    </logger>-->

    <!--logger的name作为匹配包名的作用-->
    <!--当java代码中LoggerFactory.getLogger(XX.class);匹配该XX的类名-->
    <!--当java代码中LoggerFactory.getLogger("loggername");时，name属性直接写loggername-->
    <logger name="com.example" additivity="false" level="debug">
        <appender-ref ref="infoLog"/>
        <appender-ref ref="errorLog"/>
        <appender-ref ref="file"/>
    </logger>

    <!--因为我之前做过项目要求某个功能单独出日志文件，我直接匹配了类名，其实这时可以单独写一个Logger，以String做参数-->
</configuration>
